/*
 * Copyright 2010-2020 Australian Signals Directorate
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package au.gov.asd.tac.constellation.graph.utilities.widgets;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JSpinner;
import org.openide.util.NbBundle;

/**
 * GUI Class that is used to handle input of Time based queries in conjunction
 * with the <code>FindTopComponent</code> / <code>FindCriteriaPanel</code>
 * classes.
 *
 * @author betelgeuse
 * @see au.gov.asd.tac.constellation.views.find.gui.FindTopComponent
 * @see au.gov.asd.tac.constellation.views.find.gui.FindCriteriaPanel
 */
@NbBundle.Messages({
    "TimeFormat=HH:mm:ss"
})
public class TimeRangePanel extends javax.swing.JPanel {

    private final DateTimeListenerInterface parentPanel;
    private JSpinner.DateEditor de1;
    private JSpinner.DateEditor de2;
    private Calendar firstDate = null;
    private Calendar secondDate = null;

    /**
     * Creates new form <code>TimeCriteriaPanel</code>.
     *
     * @param parent The <code>FindCriteriaPanel</code> that owns this panel.
     */
    public TimeRangePanel(final DateTimeListenerInterface parent) {
        this.parentPanel = parent;
        initialise();
    }

    private void initialise() {
        if (firstDate == null) {
            firstDate = new GregorianCalendar();
        }
        if (secondDate == null) {
            secondDate = new GregorianCalendar();
        }
        initComponents();

        de1 = new JSpinner.DateEditor(spnTime1, Bundle.TimeFormat());
        spnTime1.setEditor(de1);

        de2 = new JSpinner.DateEditor(spnTime2, Bundle.TimeFormat());
        spnTime2.setEditor(de2);
    }

    /**
     * Constructs a new <code>TimeCriteriaPanel</code> with prefilled content.
     *
     * @param parent The <code>FindCriteriaPanel</code> that owns this panel.
     * @param firstTime Time The value to place in the form's first input box.
     * @param secondTime Time The value to place in the form's second input box.
     * @param isBetween Whether or not the second input box should be shown.
     *
     * @see Calendar
     */
    public TimeRangePanel(final DateTimeListenerInterface parent, final Calendar firstTime,
            final Calendar secondTime, final boolean isBetween) {
        this.parentPanel = parent;
        this.firstDate = firstTime;
        this.secondDate = secondTime;

        initialise();
        this.setUIState(isBetween);
    }

    /**
     * Returns the current state of this panel's first input box.
     *
     * @return The value of the first input box.
     *
     * @see Calendar
     */
    public Calendar getFirstTime() {
        Calendar calendar = new GregorianCalendar(0, 0, 0, 0, 0, 0);
        calendar.setTime((Date) spnTime1.getValue());
        return calendar;
    }

    /**
     * Returns the current state of this panel's second input box.
     *
     * @return The value of the first input box.
     *
     * @see Calendar
     */
    public Calendar getSecondTime() {
        Calendar calendar = new GregorianCalendar(0, 0, 0, 0, 0, 0);
        calendar.setTime((Date) spnTime2.getValue());
        return calendar;
    }

    /**
     * Method that adjusts the form to handle multiple Time inputs.
     *
     * @param isBetween <code>true</code> if form should show the extended input
     * controls, <code>false</code> if it should not.
     */
    public void setUIState(final boolean isBetween) {
        lblTime1.setVisible(isBetween);
        spnTime2.setVisible(isBetween);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTime1 = new javax.swing.JLabel();
        spnTime1 = new javax.swing.JSpinner();
        spnTime2 = new javax.swing.JSpinner();

        setOpaque(false);

        lblTime1.setText(org.openide.util.NbBundle.getMessage(TimeRangePanel.class, "DateCriteriaPanel.lblDate1.text")); // NOI18N

        spnTime1.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(1366083314466L), null, null, java.util.Calendar.HOUR));

        spnTime2.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.HOUR));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(spnTime1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblTime1)
                .addGap(18, 18, 18)
                .addComponent(spnTime2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnTime1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTime1)
                    .addComponent(spnTime2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblTime1;
    private javax.swing.JSpinner spnTime1;
    private javax.swing.JSpinner spnTime2;
    // End of variables declaration//GEN-END:variables

    /**
     * Returns the current state of this panel's first input box.
     *
     * @return The value of the first input box.
     *
     * @see Date
     */
    public Date getFirstDate() {
        return this.getFirstTime().getTime();
    }

    /**
     * Returns the current state of this panel's second input box.
     *
     * @return The value of the first input box.
     *
     * @see Date
     */
    public Date getSecondDate() {
        return this.getSecondTime().getTime();
    }

    @Override
    public void setEnabled(final boolean flag) {
        lblTime1.setEnabled(flag);
        spnTime1.setEnabled(flag);
        spnTime2.setEnabled(flag);
    }
}
