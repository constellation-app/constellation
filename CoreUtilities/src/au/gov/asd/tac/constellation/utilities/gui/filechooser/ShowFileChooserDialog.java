/*
 * Copyright 2010-2021 Australian Signals Directorate
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package au.gov.asd.tac.constellation.utilities.gui.filechooser;

import java.io.File;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.swing.JFileChooser;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.windows.WindowManager;

/**
 * {@link Runnable} that opens file chooser dialog generated by the builder and
 * waits for the user to either select a file or cancel.
 * 
 * @author formalhaunt
 */
public class ShowFileChooserDialog implements Runnable {
    private final FileChooserBuilder fileChooserBuilder;
    private final FileChooserMode fileChooserMode;

    private File[] selectedFiles = null;

    /**
     * Creates a new show dialog task.
     *
     * @param fileChooserBuilder the file chooser builder that will provide the
     *     file chooser to open
     * @param fileChooserMode the mode to open the file chooser in
     */
    public ShowFileChooserDialog(final FileChooserBuilder fileChooserBuilder,
                                 final FileChooserMode fileChooserMode) {
        this.fileChooserBuilder = fileChooserBuilder;
        this.fileChooserMode = fileChooserMode;
    }

    /**
     * Opens the file chooser dialog in the correct mode and waits for a user
     * response.
     */
    @Override
    public void run() {
        if (fileChooserMode != null) {
            switch (fileChooserMode) {
                case OPEN:
                    selectedFiles = new File[] { fileChooserBuilder.showOpenDialog() };
                    break;
                case SAVE:
                    final JFileChooser jfc = fileChooserBuilder.createFileChooser();
                    jfc.showSaveDialog(WindowManager.getDefault().getMainWindow());                        
                    selectedFiles = new File[] { jfc.getSelectedFile() };   
                    break;
                case MULTI:
                    selectedFiles = fileChooserBuilder.showMultiOpenDialog();
                    break;
                default:
                    break;
            }
        }
    }

    /**
     * Gets the selected file(s) from the dialog.
     *
     * @return the selected file(s) or an empty optional if the user selects cancel
     */
    public Optional<List<File>> getSelectedFiles() {
        return Optional.ofNullable(selectedFiles == null || selectedFiles.length == 0
                || (selectedFiles.length == 1 && selectedFiles[0] == null)
                ? null : Arrays.stream(selectedFiles).collect(Collectors.toList()));
    }
}
