/*
 * Copyright 2010-2019 Australian Signals Directorate
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package au.gov.asd.tac.constellation.utilities.datastructure;

import java.io.Serializable;
import java.util.Objects;
import java.util.stream.Stream;

/**
 * A data-structure for storing a triplet of related values.
 *
 * @author cygnus_x-1
 *
 * @param <F> the type of the first object in the 3-tuple
 * @param <S> the type of the second object in the 3-tuple
 * @param <T> the type of the third object in the 3-tuple
 */
public class ThreeTuple<F, S, T> implements Serializable, Comparable<ThreeTuple<F, S, T>> {

    /**
     * Convenience method for creating an appropriately typed tuple.
     *
     * @param <A> the type of the first object in the 3-tuple
     * @param <B> the type of the second object in the 3-tuple
     * @param <C> the type of the third object in the 3-tuple
     * @param first the first object in the tuple
     * @param second the second object in the tuple
     * @param third the third object in the tuple
     * @return a 3-tuple that is templated with the types of first, second and
     * third
     */
    public static <A, B, C> ThreeTuple<A, B, C> create(A first, B second, C third) {
        return new ThreeTuple<>(first, second, third);
    }

    protected F first;
    protected S second;
    protected T third;

    public ThreeTuple(final F first, final S second, final T third) {
        this.first = first;
        this.second = second;
        this.third = third;
    }

    public F getFirst() {
        return first;
    }

    public void setFirst(final F first) {
        this.first = first;
    }

    public S getSecond() {
        return second;
    }

    public void setSecond(final S second) {
        this.second = second;
    }

    public T getThird() {
        return third;
    }

    public void setThird(final T third) {
        this.third = third;
    }

    public Stream<Object> stream() {
        return Stream.of(first, second, third);
    }

    @Override
    public boolean equals(final Object obj) {
        if (!(obj instanceof ThreeTuple)) {
            return false;
        }
        final ThreeTuple<?, ?, ?> other = (ThreeTuple<?, ?, ?>) obj;
        return Objects.equals(other.first, first)
                && Objects.equals(other.second, second)
                && Objects.equals(other.third, third);
    }

    @Override
    public int hashCode() {
        return (first == null ? 0 : first.hashCode())
                ^ (second == null ? 0 : second.hashCode())
                ^ (third == null ? 0 : third.hashCode());
    }

    @Override
    public String toString() {
        return String.format("(%s, %s, %s)", first.toString(),
                second.toString(), third.toString());
    }

    /**
     * Compare the Tuple similar to in Python, by comparing the first followed
     * by second and finally the third. If the object is an instance of
     * {@link Comparable} then use the built in compareTo, else convert them to
     * a {@link String} and compare them.
     */
    @Override
    @SuppressWarnings("unchecked") // We can suppress unchecked warnings for this method. They are generated by the {Comparable} casts, however we manually check these are comparable prior to the cast.
    public int compareTo(final ThreeTuple<F, S, T> o) {
        int compare;

        if (first instanceof Comparable && o.first instanceof Comparable) {
            // compare the first using Comparable
            compare = ((Comparable) first).compareTo((Comparable) o.first);
            if (compare != 0) {
                return compare;
            }
        } else {
            // compare the first using strings
            compare = first.toString().compareTo(o.first.toString());
            if (compare != 0) {
                return compare;
            }
        }

        if (second instanceof Comparable && o.second instanceof Comparable) {
            // compare the second using Comparable
            compare = ((Comparable) second).compareTo((Comparable) o.second);
            if (compare != 0) {
                return compare;
            }
        } else {
            // compare the second using strings
            compare = second.toString().compareTo(o.second.toString());
            if (compare != 0) {
                return compare;
            }
        }

        if (third instanceof Comparable && o.third instanceof Comparable) {
            // compare the third using Comparable
            compare = ((Comparable) third).compareTo((Comparable) o.third);
            if (compare != 0) {
                return compare;
            }
        }

        // compare the third using strings
        return third.toString().compareTo(o.third.toString());
    }
}
