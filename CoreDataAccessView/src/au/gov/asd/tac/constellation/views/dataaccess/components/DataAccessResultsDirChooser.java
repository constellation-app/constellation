/*
 * Copyright 2010-2021 Australian Signals Directorate
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package au.gov.asd.tac.constellation.views.dataaccess.components;

import au.gov.asd.tac.constellation.views.dataaccess.utilities.DataAccessPreferenceUtilities;
import java.awt.EventQueue;
import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Platform;
import javax.swing.SwingUtilities;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.util.Exceptions;

/**
 * Provides a file chooser dialog that allows the user to select the directory
 * for data access results to be saved into.
 *
 * @author formalhaunt
 */
public class DataAccessResultsDirChooser {
    private static final Logger LOGGER = Logger.getLogger(DataAccessResultsDirChooser.class.getName());
    
    private static final String TITLE = "Folder to save data access results to";
    private static final String FILE_CHOOSER_GROUP = "dataAccessResultsDir";
    
    private final FileChooserBuilder fileChooser;
  
    /**
     * Creates a new data access results directory chooser.
     */
    public DataAccessResultsDirChooser() {        
        fileChooser = new FileChooserBuilder(FILE_CHOOSER_GROUP)
                .setDefaultWorkingDirectory(new File(System.getProperty("user.dir")))
                .setTitle(TITLE)
                .setDirectoriesOnly(true);
    }
    
    /**
     * Opens the directory chooser and waits for the user to provide input. Saves
     * the selected directory to the data access preferences and returns it.
     * <p/>
     * This assumes that it is not called in the UI event thread and runs the dialog
     * call in a separate thread.
     *
     * @return the selected directory or null if the user selects cancel
     * @throws IllegalStateException if the method is called using a UI event thread
     */
    public File openAndSaveToPreferences() {
        if (SwingUtilities.isEventDispatchThread() || Platform.isFxApplicationThread()) {
            throw new IllegalStateException("Attempted to open data access results dir on UI thread.");
        }
        
        final ShowDialog showDialog = new ShowDialog();
        try {
            EventQueue.invokeAndWait(showDialog);
        } catch (final InterruptedException ex) {
            LOGGER.log(Level.WARNING, "Thread displaying the data access view "
                    + "results dir chooser was interrupted.", ex);
            Thread.currentThread().interrupt();
        } catch (final InvocationTargetException ex) {
            LOGGER.log(Level.SEVERE, "Error occured during selection of the data "
                    + "access view results dir.", ex);
        }
        
        final File selectedDir = showDialog.getSelectedDir();
        DataAccessPreferenceUtilities.setDataAccessResultsDir(selectedDir);
        
        return selectedDir;
    }
    
    /**
     * Gets the data access results directory chooser.
     *
     * @return the data access results directory file chooser
     */
    public FileChooserBuilder getFileChooser() {
        return fileChooser;
    }
    
    /**
     * {@link Runnable} that opens the save dialog generated by the builder and
     * waits for the user to either select a folder or cancel.
     */
    class ShowDialog implements Runnable {
        private File selectedDir;
        
        /**
         * Creates a new show dialog task.
         */
        public ShowDialog() {
            selectedDir = null;
        }
        
        /**
         * Opens the save file dialog and waits for a user response.
         */
        @Override
        public void run() {
            selectedDir = getFileChooser().showSaveDialog();
        }

        /**
         * Gets the selected folder.
         *
         * @return the selected folder or null if the user selected cancel
         */
        public File getSelectedDir() {
            return selectedDir;
        }
    }
}
