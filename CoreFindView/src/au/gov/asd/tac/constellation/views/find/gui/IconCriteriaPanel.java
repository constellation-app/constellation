/*
 * Copyright 2010-2019 Australian Signals Directorate
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package au.gov.asd.tac.constellation.views.find.gui;

import au.gov.asd.tac.constellation.graph.utilities.widgets.IconChooser;
import au.gov.asd.tac.constellation.utilities.icon.ConstellationIcon;
import au.gov.asd.tac.constellation.utilities.icon.IconManager;
import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;

/**
 * GUI Class that is used to handle input of icon based queries in conjunction
 * with the <code>FindTopComponent</code> / <code>FindCriteriaPanel</code>
 * classes.
 *
 * @author betelgeuse
 * @see FindTopComponent
 * @see FindCriteriaPanel
 */
@Messages({"No_Icon=<Select an Icon>"})
public class IconCriteriaPanel extends javax.swing.JPanel implements ActionListener {

    private final FindCriteriaPanel parentPanel;
    private IconChooser chooser;
    private String currentIcon = null;
    private final String chosenIcon;

    /**
     * Creates new form <code>IconCriteriaPanel</code>.
     *
     * @param parent The <code>FindCriteriaPanel</code> that owns this panel.
     */
    public IconCriteriaPanel(final FindCriteriaPanel parent) {
        initComponents();

        this.parentPanel = parent;

//        chooser = new IconChooser(iconMap, Bundle.No_Icon());
        chosenIcon = Bundle.No_Icon();
    }

    /**
     * Creates a <code>IconCriteriaPanel</code> with predefined content.
     *
     * @param parent The <code>FindCriteriaPanel</code> that owns this panel.
     * @param icon The predefined state for this panel. In this case it is the
     * name of the icon.
     */
    public IconCriteriaPanel(final FindCriteriaPanel parent, final String icon) {
        initComponents();

        this.parentPanel = parent;

//        chooser = new IconChooser(iconMap, icon);
        chosenIcon = icon;

        updateIcon(icon);
    }

    /**
     * Returns the current state of this panel.
     *
     * @return The currently selected icon's name.
     */
    public String getIconContent() {
        return currentIcon;
    }

    @Override
    public void actionPerformed(final ActionEvent e) {
        if ("OK".equals(e.getActionCommand())) {
            updateIcon(chooser.getSelectedIconName());

//            if(chooser.isIconAdded())
//            {
//                // Update the IconProvider.
//                //                final Map<String, byte[]> iconMap = chooser.getIconMap();
//                final IconProvider iconProvider = IconProvider.getDefault();
//                iconProvider.putAll(iconMap);
//            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelIconChoice = new javax.swing.JPanel();
        btnChooseIcon = new javax.swing.JButton();
        lblIconText = new javax.swing.JLabel();
        lblIcon = new javax.swing.JLabel();

        setOpaque(false);

        panelIconChoice.setBackground(new java.awt.Color(255, 255, 255));
        panelIconChoice.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.controlShadow));

        btnChooseIcon.setText("...");
        btnChooseIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseIconActionPerformed(evt);
            }
        });

        lblIconText.setText(Bundle.No_Icon());
        lblIconText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblIconTextMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelIconChoiceLayout = new javax.swing.GroupLayout(panelIconChoice);
        panelIconChoice.setLayout(panelIconChoiceLayout);
        panelIconChoiceLayout.setHorizontalGroup(
            panelIconChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelIconChoiceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblIconText, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnChooseIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelIconChoiceLayout.setVerticalGroup(
            panelIconChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIconChoiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnChooseIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblIconText))
        );

        lblIcon.setBackground(new java.awt.Color(255, 255, 255));
        lblIcon.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.controlShadow));
        lblIcon.setMaximumSize(new java.awt.Dimension(18, 18));
        lblIcon.setMinimumSize(new java.awt.Dimension(18, 18));
        lblIcon.setOpaque(true);
        lblIcon.setPreferredSize(new java.awt.Dimension(18, 18));
        lblIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblIconMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelIconChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelIconChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event handler for <code>btnChooseIcon</code> button presses.
     *
     * @param evt The registered event.
     */
    private void btnChooseIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseIconActionPerformed

        showDialog();
    }//GEN-LAST:event_btnChooseIconActionPerformed

    /**
     * Event handler for <code>lblIcon</code> mouse clicks.
     *
     * @param evt The registered event.
     */
    private void lblIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblIconMouseClicked

        showDialog();
    }//GEN-LAST:event_lblIconMouseClicked

    /**
     * Event handler for <code>lblIconText</code> mouse clicks.
     *
     * @param evt The registered event.
     */
    private void lblIconTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblIconTextMouseClicked

        showDialog();
    }//GEN-LAST:event_lblIconTextMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseIcon;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblIconText;
    private javax.swing.JPanel panelIconChoice;
    // End of variables declaration//GEN-END:variables

    /**
     * Shows an icon selection dialog box to the user.
     */
    private void showDialog() {
        final Dialog dialog = getIconFromUser();
        dialog.setVisible(true);
    }

    /**
     * Handles any change to the current icon.
     * <p>
     * This method handles GUI updates to ensure that the GUI correctly
     * represents the current selected icon.
     *
     * @param icon The name of the new icon to handle.
     */
    private void updateIcon(final String icon) {
        currentIcon = icon;

        if (currentIcon != null && !currentIcon.isEmpty()) {
            lblIconText.setText(currentIcon);
        } else {
            lblIconText.setText(Bundle.No_Icon());
        }
        Icon imageIcon = null;
        final ConstellationIcon constellationIcon = IconManager.getIcon(currentIcon);
        if (constellationIcon != null) {
            imageIcon = constellationIcon.buildIcon();
        }
        //        final ImageIcon imageIcon = chooser.getIconMap().get(currentIcon) != null ?
//                new ImageIcon(chooser.getIconMap().get(currentIcon)) : null;

        // Scale the Icon so that it fits perfectly in the display label:
        if (imageIcon != null) {
            ((ImageIcon) imageIcon).setImage(((ImageIcon) imageIcon).getImage().getScaledInstance(lblIcon.getPreferredSize().width, lblIcon.getPreferredSize().height, 0));
        }

        lblIcon.setIcon(imageIcon);

        // Something has likely changed, so save the state:
        parentPanel.saveStateToGraph();
    }

    /**
     * Creates a dialog box based on the <code>IconPropertyEditor</code> class.
     *
     * @return An icon selection dialog box.
     * @see IconPropertyEditor
     * @see Dialog
     */
    private Dialog getIconFromUser() {
        chooser = new IconChooser(IconManager.getIcons(), chosenIcon);
        final DialogDescriptor dialog = new DialogDescriptor(chooser, NbBundle.getMessage(ColorPropertyEditor.class, "MSG_SelectColor"), true, this);

        return DialogDisplayer.getDefault().createDialog(dialog);
    }
}
