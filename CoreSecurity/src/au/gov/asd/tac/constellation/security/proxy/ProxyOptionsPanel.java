/*
 * Copyright 2010-2020 Australian Signals Directorate
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package au.gov.asd.tac.constellation.security.proxy;

import java.awt.Component;
import javax.swing.JScrollPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 * An options panel allowing customisation of proxy settings.
 *
 * @author algol
 * @author cygnus_x-1
 */
public class ProxyOptionsPanel extends javax.swing.JPanel {

    private final ProxyOptionsPanelController controller;

    public ProxyOptionsPanel(final ProxyOptionsPanelController controller) {
        this.controller = controller;
        initComponents();

        defaultProxyText.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(final DocumentEvent event) {
                bypassProxyHostsLabel.setEnabled(!defaultProxyText.getText().isEmpty());
                bypassProxyHostsDescription.setEnabled(!defaultProxyText.getText().isEmpty());
                bypassProxyHostsText.setEnabled(!defaultProxyText.getText().isEmpty());
            }

            @Override
            public void removeUpdate(final DocumentEvent event) {
                bypassProxyHostsLabel.setEnabled(!defaultProxyText.getText().isEmpty());
                bypassProxyHostsDescription.setEnabled(!defaultProxyText.getText().isEmpty());
                bypassProxyHostsText.setEnabled(!defaultProxyText.getText().isEmpty());
            }

            @Override
            public void changedUpdate(final DocumentEvent event) {
                // DO NOTHING.
            }
        });
    }

    private void setProxyPanelEnabled(final boolean useDefaultSettings) {
        for (final Component c : proxySettingsPanel.getComponents()) {
            if (c instanceof JScrollPane) {
                ((JScrollPane) c).getViewport().getView().setEnabled(useDefaultSettings);
            } else {
                c.setEnabled(useDefaultSettings);
            }
        }
    }

    boolean getUseDefaultSettings() {
        return useDefaultSettingsCheck.isSelected();
    }

    void setUseDefaultSettings(final boolean useDefaultSettings) {
        useDefaultSettingsCheck.setSelected(useDefaultSettings);
        if (useDefaultSettings) {
            final ConstellationHttpProxy defaultProxy = ConstellationHttpProxy.getDefault();
            setDefaultProxy(defaultProxy.getDefaultProxyString());
            setAdditionalProxies(defaultProxy.getAdditionalProxiesString());
            setBypassProxyHosts(defaultProxy.getBypassProxyHostsString());
        }
        setProxyPanelEnabled(!useDefaultSettings);
    }

    public String getDefaultProxy() {
        return defaultProxyText.getText().trim();
    }

    public void setDefaultProxy(final String defaultProxy) {
        defaultProxyText.setText(defaultProxy);
    }

    public String getAdditionalProxies() {
        return additionalProxiesText.getText().trim();
    }

    public void setAdditionalProxies(final String additionalProxies) {
        additionalProxiesText.setText(additionalProxies);
    }

    public String getBypassProxyHosts() {
        return bypassProxyHostsText.getText().trim();
    }

    public void setBypassProxyHosts(final String bypassProxyHosts) {
        bypassProxyHostsText.setText(bypassProxyHosts);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        proxySettingsPanel = new javax.swing.JPanel();
        bypassProxyHostsLabel = new javax.swing.JLabel();
        defaultProxyText = new javax.swing.JTextField();
        additionalProxiesLabel = new javax.swing.JLabel();
        defaultProxyLabel = new javax.swing.JLabel();
        additionalProxiesDescription = new javax.swing.JLabel();
        bypassProxyHostsDescription = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bypassProxyHostsText = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        additionalProxiesText = new javax.swing.JTextArea();
        defaultProxyDescription = new javax.swing.JLabel();
        useDefaultSettingsCheck = new javax.swing.JCheckBox();

        proxySettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ProxyOptionsPanel.class, "ProxyOptionsPanel.proxySettingsPanel.border.title"))); // NOI18N

        bypassProxyHostsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(bypassProxyHostsLabel, org.openide.util.NbBundle.getMessage(ProxyOptionsPanel.class, "ProxyOptionsPanel.bypassProxyHostsLabel.text")); // NOI18N

        defaultProxyText.setText(org.openide.util.NbBundle.getMessage(ProxyOptionsPanel.class, "ProxyOptionsPanel.defaultProxyText.text")); // NOI18N

        additionalProxiesLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(additionalProxiesLabel, org.openide.util.NbBundle.getMessage(ProxyOptionsPanel.class, "ProxyOptionsPanel.additionalProxiesLabel.text")); // NOI18N

        defaultProxyLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(defaultProxyLabel, org.openide.util.NbBundle.getMessage(ProxyOptionsPanel.class, "ProxyOptionsPanel.defaultProxyLabel.text")); // NOI18N

        additionalProxiesDescription.setFont(new java.awt.Font("Dialog", 2, 10)); // NOI18N
        additionalProxiesDescription.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(additionalProxiesDescription, org.openide.util.NbBundle.getMessage(ProxyOptionsPanel.class, "ProxyOptionsPanel.additionalProxiesDescription.text")); // NOI18N
        additionalProxiesDescription.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        bypassProxyHostsDescription.setFont(new java.awt.Font("Dialog", 2, 10)); // NOI18N
        bypassProxyHostsDescription.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(bypassProxyHostsDescription, org.openide.util.NbBundle.getMessage(ProxyOptionsPanel.class, "ProxyOptionsPanel.bypassProxyHostsDescription.text")); // NOI18N
        bypassProxyHostsDescription.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        bypassProxyHostsText.setColumns(20);
        bypassProxyHostsText.setLineWrap(true);
        bypassProxyHostsText.setRows(5);
        jScrollPane1.setViewportView(bypassProxyHostsText);

        additionalProxiesText.setColumns(20);
        additionalProxiesText.setLineWrap(true);
        additionalProxiesText.setRows(5);
        jScrollPane2.setViewportView(additionalProxiesText);

        defaultProxyDescription.setFont(new java.awt.Font("Dialog", 2, 10)); // NOI18N
        defaultProxyDescription.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        org.openide.awt.Mnemonics.setLocalizedText(defaultProxyDescription, org.openide.util.NbBundle.getMessage(ProxyOptionsPanel.class, "ProxyOptionsPanel.defaultProxyDescription.text")); // NOI18N
        defaultProxyDescription.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout proxySettingsPanelLayout = new javax.swing.GroupLayout(proxySettingsPanel);
        proxySettingsPanel.setLayout(proxySettingsPanelLayout);
        proxySettingsPanelLayout.setHorizontalGroup(
            proxySettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proxySettingsPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(proxySettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(additionalProxiesLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(defaultProxyLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bypassProxyHostsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(defaultProxyDescription, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(additionalProxiesDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(bypassProxyHostsDescription, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(proxySettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(defaultProxyText)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        proxySettingsPanelLayout.setVerticalGroup(
            proxySettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(proxySettingsPanelLayout.createSequentialGroup()
                .addGroup(proxySettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(proxySettingsPanelLayout.createSequentialGroup()
                        .addComponent(defaultProxyLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(defaultProxyDescription))
                    .addComponent(defaultProxyText, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(proxySettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(proxySettingsPanelLayout.createSequentialGroup()
                        .addComponent(additionalProxiesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(additionalProxiesDescription))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(proxySettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(proxySettingsPanelLayout.createSequentialGroup()
                        .addComponent(bypassProxyHostsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bypassProxyHostsDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        useDefaultSettingsCheck.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(useDefaultSettingsCheck, org.openide.util.NbBundle.getMessage(ProxyOptionsPanel.class, "ProxyOptionsPanel.useDefaultSettingsCheck.text")); // NOI18N
        useDefaultSettingsCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useDefaultSettingsCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(proxySettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(useDefaultSettingsCheck)
                        .addGap(0, 457, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(useDefaultSettingsCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(proxySettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        proxySettingsPanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ProxyOptionsPanel.class, "ProxyOptionsPanel.proxySettingsPanel.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void useDefaultSettingsCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_useDefaultSettingsCheckActionPerformed
    {//GEN-HEADEREND:event_useDefaultSettingsCheckActionPerformed
        setUseDefaultSettings(useDefaultSettingsCheck.isSelected());
    }//GEN-LAST:event_useDefaultSettingsCheckActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel additionalProxiesDescription;
    private javax.swing.JLabel additionalProxiesLabel;
    private javax.swing.JTextArea additionalProxiesText;
    private javax.swing.JLabel bypassProxyHostsDescription;
    private javax.swing.JLabel bypassProxyHostsLabel;
    private javax.swing.JTextArea bypassProxyHostsText;
    private javax.swing.JLabel defaultProxyDescription;
    private javax.swing.JLabel defaultProxyLabel;
    private javax.swing.JTextField defaultProxyText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel proxySettingsPanel;
    private javax.swing.JCheckBox useDefaultSettingsCheck;
    // End of variables declaration//GEN-END:variables
}
