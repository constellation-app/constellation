/*
 * Copyright 2010-2019 Australian Signals Directorate
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package au.gov.asd.tac.constellation.views.pluginreporter;

import au.gov.asd.tac.constellation.graph.Graph;
import au.gov.asd.tac.constellation.graph.manager.GraphManager;
import au.gov.asd.tac.constellation.graph.manager.GraphManagerListener;
import au.gov.asd.tac.constellation.plugins.reporting.GraphReportListener;
import au.gov.asd.tac.constellation.plugins.reporting.GraphReportManager;
import au.gov.asd.tac.constellation.plugins.reporting.PluginReport;
import au.gov.asd.tac.constellation.utilities.font.FontUtilities;
import au.gov.asd.tac.constellation.utilities.javafx.JavafxStyleManager;
import au.gov.asd.tac.constellation.views.pluginreporter.panes.PluginReporterPane;
import java.awt.BorderLayout;
import java.awt.Dimension;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.paint.Color;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * The PluginReporterTopComponent provides the UI for the entire plugin
 * reporter.
 */
@ConvertAsProperties(
        dtd = "-//au.gov.asd.tac.constellation.views.pluginreporter//PluginReporter//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "PluginReporterTopComponent",
        iconBase = "au/gov/asd/tac/constellation/views/pluginreporter/resources/plugin-reporter.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(
        mode = "rightSlidingSide",
        openAtStartup = true
)
@ActionID(
        category = "Window",
        id = "au.gov.asd.tac.constellation.views.pluginreporter.PluginReporterTopComponent"
)
@ActionReferences({
    @ActionReference(path = "Menu/Views", position = 900)
    ,
    @ActionReference(path = "Shortcuts", name = "CS-P")
})
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PluginReporterAction",
        preferredID = "PluginReporterTopComponent"
)
@Messages({
    "CTL_PluginReporterAction=Plugin Reporter",
    "CTL_PluginReporterTopComponent=Plugin Reporter",
    "HINT_PluginReporterTopComponent=Plugin Reporter"
})
public final class PluginReporterTopComponent extends TopComponent implements GraphManagerListener, GraphReportListener {

    private JFXPanel panel = new JFXPanel();
    private PluginReporterPane reporterPane;

    public PluginReporterTopComponent() {
        initComponents();
        setName(Bundle.CTL_PluginReporterTopComponent());
        setToolTipText(Bundle.HINT_PluginReporterTopComponent());

        setPreferredSize(new Dimension(400, 800));

        setLayout(new BorderLayout());
        add(panel, BorderLayout.CENTER);

        Platform.setImplicitExit(false);
        Platform.runLater(() -> {
            reporterPane = new PluginReporterPane();

            final Scene scene = new Scene(reporterPane, Color.web("#444444"));
            scene.getStylesheets().add(JavafxStyleManager.getMainStyleSheet());
            scene.rootProperty().get().setStyle(String.format("-fx-font-size:%d;", FontUtilities.getOutputFontSize()));
            scene.getStylesheets().add(PluginReporterTopComponent.class.getResource("resources/plugin-reporter.css").toExternalForm());

            panel.setScene(scene);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        GraphManager.getDefault().addGraphManagerListener(this);
        GraphReportManager.addGraphReportListener(this);
        newActiveGraph(GraphManager.getDefault().getActiveGraph());
    }

    @Override
    public void componentClosed() {
        newActiveGraph(null);
        GraphReportManager.removeGraphReportListener(this);
        GraphManager.getDefault().removeGraphManagerListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // Required for @ConvertAsProperties, intentionally left blank

    }

    void readProperties(java.util.Properties p) {
        // Required for @ConvertAsProperties, intentionally left blank
    }

    @Override
    public void graphOpened(Graph graph) {
        // Required for GraphManagerListener, intentionally left blank
    }

    @Override
    public void graphClosed(Graph graph) {
        // Required for GraphManagerListener, intentionally left blank
    }

    @Override
    public void newActiveGraph(Graph graph) {
        Platform.runLater(() -> {
            if (graph == null) {
                reporterPane.setGraphReport(null);
            } else {
                reporterPane.setGraphReport(GraphReportManager.getGraphReport(graph.getId()));
            }
        });
    }

    @Override
    public void newPluginReport(PluginReport pluginReport) {
        final Graph activeGraph = GraphManager.getDefault().getActiveGraph();
        if (activeGraph != null && pluginReport.getGraphReport().getGraphId().equals(activeGraph.getId())) {
            reporterPane.addPluginReport(pluginReport);
        }
    }
}
