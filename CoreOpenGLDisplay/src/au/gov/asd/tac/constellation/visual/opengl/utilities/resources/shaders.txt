// These are some stock shaders use by the OpenGL SuperBible.
//
// For applications, these shaders are pretty much irrelevant.
//
// Identity Shader (SHADER_IDENTITY)
// This shader does no transformations at all, and uses the current
// glColor value for fragments.
// It will shade between vertices.
SHADER_IDENTITY_VS =
#version 330 core
in vec4 vVertex;
void main(void)
{
    gl_Position = vVertex;
}

SHADER_IDENTITY_FS =
#version 330 core
uniform vec4 vColor;
out vec4 outColor;
void main(void)
{
//    gl_FragColor = vColor;
    outColor = vColor;
}

//
// Flat Shader (SHADER_FLAT)
// This shader applies the given model view matrix to the vertices,
// and uses a uniform color value.
SHADER_FLAT_VS =
#version 330 core
uniform mat4 mvpMatrix;
in vec4 vVertex;
void main(void)
{
    gl_Position = mvpMatrix * vVertex;
}

SHADER_FLAT_FS =
#version 330 core
uniform vec4 vColor;
out vec4 outColor;
void main(void)
{
//    gl_FragColor = vColor;
    outColor = vColor;
}

// Point light, diffuse lighting only
SHADER_POINT_LIGHT_DIFF_VS =
#version 330 core
uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform vec3 vLightPos;
uniform vec4 vColor;
in vec4 vVertex;
in vec3 vNormal;
out vec4 vFragColor;
void main(void)
{
    mat3 mNormalMatrix;
    mNormalMatrix[0] = normalize(mvMatrix[0].xyz);
    mNormalMatrix[1] = normalize(mvMatrix[1].xyz);
    mNormalMatrix[2] = normalize(mvMatrix[2].xyz);
    vec3 vNorm = normalize(mNormalMatrix * vNormal);
    vec4 ecPosition;
    vec3 ecPosition3;
    ecPosition = mvMatrix * vVertex;
    ecPosition3 = ecPosition.xyz /ecPosition.w;
    vec3 vLightDir = normalize(vLightPos - ecPosition3);
    float fDot = max(0.0, dot(vNorm, vLightDir));
    vFragColor.rgb = vColor.rgb * fDot;
    vFragColor.a = vColor.a;
    mat4 mvpMatrix;
    mvpMatrix = pMatrix * mvMatrix;
    gl_Position = mvpMatrix * vVertex;
}

SHADER_POINT_LIGHT_DIFF_FS =
#version 330 core
in vec4 vFragColor;
out vec4 outColor;
void main(void)
{
//    gl_FragColor = vFragColor;
    outColor = vFragColor;
}

// Point light (Diffuse only), with texture (modulated)
SHADER_TEXTURE_POINT_LIGHT_DIFF_VS =
#version 330 core
uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform vec3 vLightPos;
uniform vec4 vColor;
in vec4 vVertex;
in vec3 vNormal;
out vec4 vFragColor;
in vec2 vTexCoord0;
out vec2 vTex;
void main(void)
{
    mat3 mNormalMatrix;
    mNormalMatrix[0] = normalize(mvMatrix[0].xyz);
    mNormalMatrix[1] = normalize(mvMatrix[1].xyz);
    mNormalMatrix[2] = normalize(mvMatrix[2].xyz);
    vec3 vNorm = normalize(mNormalMatrix * vNormal);
    vec4 ecPosition;
    vec3 ecPosition3;
    ecPosition = mvMatrix * vVertex;
    ecPosition3 = ecPosition.xyz /ecPosition.w;
    vec3 vLightDir = normalize(vLightPos - ecPosition3);
    float fDot = max(0.0, dot(vNorm, vLightDir));
    vFragColor.rgb = vColor.rgb * fDot;
    vFragColor.a = vColor.a;
    vTex = vTexCoord0;
    mat4 mvpMatrix;
    mvpMatrix = pMatrix * mvMatrix;
    gl_Position = mvpMatrix * vVertex;
}

SHADER_TEXTURE_POINT_LIGHT_DIFF_FS =
#version 330 core
in vec4 vFragColor;
in vec2 vTex;
uniform sampler2D textureUnit0;
out vec4 outColor;
void main(void)
{
//    gl_FragColor = vFragColor * texture2D(textureUnit0, vTex);
    outColor = vFragColor * texture(textureUnit0, vTex);
}

=
